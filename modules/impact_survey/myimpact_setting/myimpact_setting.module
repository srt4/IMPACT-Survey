<?php
/*
 * hook_init()
 */
function myimpact_setting_init(){
	drupal_add_css(drupal_get_path('module', 'myimpact_setting') . 'myimpact_setting.css', array('group' => CSS_DEFAULT));
}


/*
 * hook_menu
 *
 */

function myimpact_setting_menu() {

	//myimpact page
	 $items['myimpact'] = array(
		'title' => 'My IMPACT',
		'description' => 'my impact page',
		'page callback' => 'myimpact_setting_myimpact_page',
		//'access callback' => 'user_access',
		'access callback' => 'user_is_logged_in',
		//'access arguments' => array('myimpact page'),
	 	'weight' => -50,
	 	'menu_name' => "menu-my-impact",
		'type' => MENU_NORMAL_ITEM, 	
  );
	
	$items['myimpact/registration'] = array(
		'title' => 'My IMPACT',
		'description' => 'my impact page',
		'page callback' => 'myimpact_setting_myimpact_registration_page',
		'access callback' => TRUE,
	 	'weight' => -50,
	 	'menu_name' => "My IMPACT",
		'type' => MENU_NORMAL_ITEM,
	 	
  );  
		
  //confirm the imls_data
  $items['imls_data/%/confirm'] = array(
        'page callback' => 'drupal_get_form',
      	'page arguments' => array('myimpact_setting_submit_confirm_form',0),
        'title' => 'Submit Confirm',
      	'type' => MENU_CALLBACK,
      	'access callback' => 'user_access',
      	'access arguments' => array('imls and intake submit'),	
  );

  //confirm the intake form
  $items['intake_form/%/confirm'] = array(
        'page callback' => 'drupal_get_form',
      	'page arguments' => array('myimpact_setting_submit_confirm_form',0),
        'title' => 'Submit Confirm',
      	'type' => MENU_CALLBACK,
      	'access callback' => 'user_access',
      	'access arguments' => array('imls and intake submit'),	
  );

  return $items;
}

/*
 * hook_permission
 */
function myimpact_setting_permission(){
  return array(
		'imls and intake submit' => array( 
		'title' => t('IMLS Data and intake form submit'), 
		'description' => t('Allow users to submit the IMLS Data and intake form'),
  ),
  		'myimpact page' => array(
  		'title' => t('Myimpact Page'), 
		'description' => t('Allow users to go to the myimpact page'),
  ),
  );
}

/*
 * hook_profile2_form_alter()
 *
 */
function myimpact_setting_form_profile2_form_alter(&$form, &$form_state, $form_id) {

  //only works in this module
  $path = substr($_GET['q'],0,25);

  if($form_id=="profile2_form" && $path=='admin/profiles_management' ){
    $form['#submit'][1] = "myimpact_setting_profile_management_submit";

    //remove the delete button
    unset($form['actions']['delete']);

    $path=explode("/", $_GET['q']);
    $count=count($path);
    
    //remove the state and system which cause errors
    if($path[$count-3]=="profile-library_registration"){
    	unset($form['profile_library_registration']['field_library_reg_state']);
    	unset($form['profile_library_registration']['field_library_reg_system']);
    }
    
    //these two submit and unsubmit buttons are only for IMLS Data and Intake form
    if($path[$count-3]=="profile-imls_data" or $path[$count-3]=="profile-intake_form"){
    $form['actions']['unsubmit']=array(
    	'#type' => 'submit',
    	'#value' => 'Unsubmit',
    	'#weight' => '50',
    	'#submit' => array('myimpact_setting_status_delete_submit'),
    );

    $form['actions']['new_submit']=array(
    	'#type' => 'submit',
    	'#value' => 'Submit',
    	'#weight' => '50',
    	'#submit' => array('myimpact_setting_status_submit_submit'),
    );
    }
  }

  if(isset($form['profile_library_registration']) && $path=='admin/profiles_management'){
    unset($form['profile_library_registration']['field_library_reg_state']);
    unset($form['profile_library_registration']['field_library_reg_system']);
  }

  //add submit button to imls data and intake form
  if($form_id=="profile2_edit_imls_data_form" or $form_id=="profile2_edit_intake_form_form")
  {
     
    $form['#submit']['1'] = "myimpact_setting_profile2_user_submit";
     
    $form['actions']['done']=array(
  		'#type'=>'submit', 
  		'#value'=>'Submit', 
  		'#weight'=>'50', 
  		'#submit'=>array(
  					'profile2_form_submit_handler',
  				    'myimpact_setting_profile_done',
    ),
  		'#validate' => array('myimpact_setting_submit_validate')
    );

  }
  
  //change the save button to submit button

  if($form_id=="profile2_edit_survey_fielding_form") $form['actions']['submit']['#value']="Submit";  
}

/*
 * confirm the submit function
 */
function myimpact_setting_submit_confirm_form($form, &$form_state, $type){

  global $user;

  $confirm_question = t('Are you sure you want to submit the IMLS Data?');
  $description = "After submitting, you will have no access to edit the form any more";
   
  $form_state['value']['type']=$type;

  return confirm_form($form, $confirm_question, "profile-$type/$user->uid/edit", $description);
}

function myimpact_setting_submit_confirm_form_submit($form, &$form_state){
  global $user;

  $type=$form_state['value']['type'];
  $insert=(myimpact_setting_insert_status($user->uid, $type))?'Thank you! You have submitted successfully.':'You have submitted before. Thank you!';

  drupal_set_message($insert);
  $form_state['redirect'] = "profile-$type/$user->uid";
}

/*
 * the submit button in Profiles Management
 */
function myimpact_setting_status_submit_submit($form, &$form_state){
  $path=explode('/', $_GET['q']);

  $count=count($path);

  if(isset($form['profile_imls_data'])) $type="imls_data";
  if(isset($form['profile_intake_form'])) $type="intake_form";

  $insert=(myimpact_setting_insert_status($path[($count-2)], $type))?'Thank you! You have submitted successfully.':'You have submitted before. Thank you!';

  drupal_set_message($insert);
}

/*
 * submit button in user edit page
 */
function myimpact_setting_profile_done($form, &$form_state){

  global $user;

  //change the id into the type
  if($form['#id']=="profile2-edit-imls-data-form") $type="imls_data";
  if($form['#id']=="profile2-edit-intake-form-form") $type="intake_form";


  $form_state['redirect'] = "$type"."/".$user->uid."/confirm";

}

/*
 * hook_profile2_delete
 *
 * delete the status when deleting the profile
 *
 */
function myimpact_setting_profile2_delete($profile) {
 	myimpact_setting_delete_status($profile->pid);

}

/*
 * validate before submit
 */
function myimpact_setting_submit_validate($form, &$form_state){

  //check the IMLS form
  if(isset($form_state['values']['profile_imls_data'])){
    foreach ($form_state['values']['profile_imls_data'] as $value){
      if (empty($value['und']['0']['value'])) form_set_error('', t('Sorry! You can not submit the form until you complete all fields!'));
    }
  }
}

/*
 *
 * for profiles_management save button
 *
 */
function myimpact_setting_profile_management_submit($form, &$form_state){

  $path=explode('/', $_GET['q']);

  if ( isset($path['6']) && $path['6']=='edit' )
  $form_state['redirect']="admin/profiles_management/".$path['2']."/custom/".$path['4']."/".$path['5']."/view";
  else
  $form_state['redirect']="admin/profiles_management/".$path['2']."/".$path['3']."/view";

  drupal_set_message(t('The changes have been saved.'));

}

/*
 *
 *  a new submit function which is only for the profiles2 tables in profiles_management module
 */
function myimpact_setting_profile2_user_submit($form, &$form_state){
  //$form_state['redirect']="myimpact";
  drupal_set_message('Your data has been saved but not submitted. We encorage you to complete that as soon as possible!');
}

/*
 * delete the status in Profiles Management
 */
function myimpact_setting_status_delete_submit($form, &$form_state){

  $path=explode('/', $_GET['q']);

  $count=count($path);

  if(isset($form['profile_imls_data'])){
    $sql="select pid from {myimpact_profile_status where uid=:uid and type='imls_data'";
    $pid=db_query($sql, array('uid'=>$path[$count-2]))->fetchField();

    if(empty($pid)) drupal_set_message("The user has not submitted", 'warning');
    else {
      myimpact_setting_delete_status($pid);
      drupal_set_message("Delete the status successfully.");
    }
  }

  if(isset($form['profile_intake_form'])){
    $sql="select pid from {myimpact_profile_status where uid=:uid and type='intake_form'";
    $pid=db_query($sql, array('uid'=>$path[$count-2]))->fetchField();

    if(empty($pid)) drupal_set_message("The user has not submitted", 'warning');
    else {
      myimpact_setting_delete_status($pid);
      drupal_set_message("Delete the status successfully.");
    }
  }
}


/*
 *
 * insert the status
 *
 * if it exists, return false
 *
 * else, insert and return true
 *
 */

function myimpact_setting_insert_status($uid, $type){
  	
  //check if it exists
  $sql="select pid from {myimpact_profile_status} where uid=:uid and type=:type";
  $pid=db_query($sql, array('uid'=>$uid, 'type'=>$type))->fetchField();

  if(!empty($pid)) return FALSE;

  //get the pid from the table profile
  $sql="select pid from {profile} where uid=:uid and type=:type";
  $pid=db_query($sql, array('uid'=>$uid, 'type'=>$type))->fetchField();

  $fields = array('pid' => $pid, 'type' => $type, 'uid' => $uid, 'status'=>'1');
  db_insert('myimpact_profile_status')->fields($fields)->execute();

  return TRUE;
}

/*
 * delete the record in myimpact_profile_status
 */
function myimpact_setting_delete_status($pid){

  $delete="delete from {myimpact_profile_status} where pid=:pid";
  $delete=db_query($delete, array('pid'=>$pid));

  return $delete;
}

/*
 * hook_profile2_view
 *
 */
function myimpact_setting_profile2_view($profile, $view_mode, $langcode) {
  $table = array();
  $table['attributes'] = array('class' => array('library_form'));

  if($profile->type=="imls_data"){

    if(isset($profile->content['empty'])) drupal_goto("profile-imls_data/$profile->uid/edit");
     
    $query = "SELECT field_name, data FROM {field_config_instance} WHERE bundle = 'imls_data'";
    $results = db_query($query);

    foreach($results as $v){
      $field[$v->field_name]=unserialize($v->data);
    }

    foreach($field as $key => $value){
      $new[$key] = $value['widget']['weight'];
    }

    //sort the weight
    asort($new);

    $i=1;
    foreach($new as $key=>$value){
      if(isset($go_through[$value])) {$value=$value+$i; $i++;}
      $go_through[$value]=$key;
    }


    foreach($go_through as $value){
      $rows[]=array(
			'data' => array(array('data' => isset($field[$value]['label'])?$field[$value]['label']:''), array('data' => isset($profile->content[$value]['0']['#markup'])?$profile->content[$value]['0']['#markup']:'')),
			'height' => '30px',
      );
    }

    unset($profile->content);

    $table['rows'] = $rows;

    $profile->content[]=array(
 	 		'#markup'=>theme('table', $table),
    );
  }

  if($profile->type=="intake_form"){

    if(isset($profile->content['empty'])) drupal_goto("profile-intake_form/$profile->uid/edit");
     
    $query = "SELECT field_name, data FROM {field_config_instance} WHERE bundle = 'intake_form'";
    $results = db_query($query);

    foreach($results as $v){
      $field[$v->field_name]=unserialize($v->data);
    }

    foreach($field as $key => $value){
      $new[$key] = $value['widget']['weight'];
    }

    //sort the weight
    asort($new);

    $i=1;
    foreach($new as $key=>$value){
      if(isset($go_through[$value])) {$value=$value+$i; $i++;}
      $go_through[$value]=$key;
    }

    foreach($go_through as $value){
      $rows[]=array(
			'data' => array(array('data' => isset($field[$value]['label'])?$field[$value]['label']:''), array('data' => isset($profile->content[$value]['0']['#markup'])?myimpact_setting_markup_display($profile->content[$value]):'', 'width'=>'180px')),
			'height' => '30px',
      );
    }

    unset($profile->content);

    $table['rows'] = $rows;

    $profile->content[]=array(
 	 		'#markup'=>theme('table', $table),
    );
  }
}

function myimpact_setting_markup_display($content){
	
	$output='';
	if(isset($content[1]['#markup'])){
		$i=0;
		do{
			if(strlen($content[$i]['#markup'])>=25) $display="<li title='".$content[$i]['#markup']."'>".substr($content[$i]['#markup'], 0, 25)."...</li>";
			else $display="<li>".$content[$i]['#markup']."</li>";
			$output.=$display;
			$i++;
		}while(isset($content[$i]['#markup']));
		
	}
	else return $content[0]['#markup'];
	
	return $output;
	
}

/**
 * Implements hook_theme().
 */
function myimpact_setting_theme() {

  return array(
    'myimpact_setting' => array(
      'template' => 'myimpact_setting',
    ),
  );

}


/*
 * myimpact page
 */
function myimpact_setting_myimpact_page(){
	
	//add css to myimpact
	drupal_add_css(drupal_get_path('module', 'myimpact_setting') . '/myimpact_setting.css');
	
	global $user;
	$uid = $user->uid;

		//library name
		$sql="select field_library_reg_pref_value as value from {field_data_field_library_reg_pref} as a, {profile} as b where a.entity_id=b.pid and b.uid=:uid and b.type='library_registration'";
		$alt_name=db_query($sql, array('uid'=>$uid))->fetchField();

		if(empty($alt_name)){
  			$fscs = token_replace("[current-user:profile-library-registration:field-library-reg-system]") ? token_replace("[current-user:profile-library-registration:field-library-reg-system]") : 0;
  			$query = "SELECT library_name FROM {library_lookup} WHERE fscs_key = '$fscs'";
  			$system_name = db_query($query)->fetchField();
		}
		else $system_name=$alt_name;
	
		//Name
		$sql="select field_library_reg_fname_value as value from {field_data_field_library_reg_fname} as a, {profile} as b where a.entity_id=b.pid and b.uid=:uid and b.type='library_registration'";
		$firstname=db_query($sql,array('uid'=>$uid))->fetchField();
		
		$sql="select field_library_reg_lname_value as value from {field_data_field_library_reg_lname} as a, {profile} as b where a.entity_id=b.pid and b.uid=:uid and b.type='library_registration'";
		$lastname=db_query($sql,array('uid'=>$uid))->fetchField();
		
		//Job title
		$sql="select field_library_reg_position_value as value from {field_data_field_library_reg_position} as a, {profile} as b where a.entity_id=b.pid and b.uid=:uid and b.type='library_registration'";
		$jobtitle=db_query($sql,array('uid'=>$uid))->fetchField();
		
		//Phone number
		$sql="select field_library_reg_phone_value as value from {field_data_field_library_reg_phone} as a, {profile} as b where a.entity_id=b.pid and b.uid=:uid and b.type='library_registration'";
		$phonenum=db_query($sql,array('uid'=>$uid))->fetchField();
		
		//Phone extension
		$sql="select field_library_reg_extension_value as value from {field_data_field_library_reg_extension} as a, {profile} as b where a.entity_id=b.pid and b.uid=:uid and b.type='library_registration'";
		$phoneext=db_query($sql,array('uid'=>$uid))->fetchField();
		if(!empty($phoneext)) $phoneext="-ex($phoneext)";
		
		//Completed Surveys
		$fscs = token_replace('[current-user:profile-library-registration:field-library-reg-system]');
		$result_count = db_query("SELECT COUNT( * ) AS responses FROM {survey_responses} WHERE libid = :fscs", array('fscs'=>$fscs))->fetchField();
	
		//Step
			//get the forms submitted
			$sql="select type from {myimpact_profile_status} where uid=:uid";
			$submit=db_query($sql,array('uid'=>$uid));
		
			
			
			  $i=0;
			  foreach($submit as $s){
			    $user_filled[$i]=$s->type;
			    $i++;
			  }
		
			  if(isset($user_filled)){
			  //check IMLS
			  $flag=0;
			  foreach($user_filled as $r){
			    if ($r=="imls_data") $flag='1';
			  }
		
			  //check Information Form
			  if($flag=='1'){
			    foreach($user_filled as $r){
			      if ($r=="intake_form") $flag='2';
			    }
			  }
			}
			else $flag=0;
			
			//chek Dates
			if ($flag=='2'){
			  //get the forms filled out
					$sql="select type from {profile} where uid=:uid and type=:type";
					$survey_fielding=db_query($sql,array('uid'=>$uid, 'type'=>"survey_fielding"))->fetchField();
		
					if (!empty($survey_fielding)) $flag='3';
			}
		
			//get dates
			$sql="select field_fielding_date_value2 from {profile} as p,{field_data_field_fielding_date} as f where p.uid=:uid and p.type='survey_fielding' and f.entity_id=p.pid";
			$date=db_query($sql,array('uid'=>$uid))->fetchField();
			$date=strtotime($date);
		
			//check whether the date is expired.
			if(isset($date)){
			  if(empty($date)) $flag=2;
			  elseif($date<time()) $flag=4;
			}
		
			switch($flag){
			  case 0:
			    $step="1. Confirm your library's <a href=./profile-imls_data>IMLS Data</a>";
			    break;
			  case 1:
			    $step='2. Complete the <a href=./profile-intake_form>Intake Form</a>';
			    break;
			  case 2:
			    $step='3. Select your <a href=./profile-survey_fielding>survey fielding</a> dates';
			    break;
			  case 3:
			    $step='4. <a href=./codebox>Get your survey links, and let your survey run.</a>';
			    break;
			  case 4:
			    $step='Your report is done, view it <a href=./reports>here</a>';
			    break;
			}
		
		//Photo and Logo
		      $tag="Change";
			
			  $publicPath=variable_get('file_public_path', conf_path() . '/files');
			  //get the path of logo
			  $sql="select uri from {profile} as p,{field_data_field_reg_logo_pic} as f, {file_managed} as m where p.uid=:uid and p.type='photo_logo' and f.entity_id=p.pid and m.fid=f.field_reg_logo_pic_fid";
			  $logo=db_query($sql,array('uid'=>$uid))->fetchField();

			  //get the path of library pic
  			  $sql="select uri from {profile} as p,{field_data_field_reg_library_pic} as f, {file_managed} as m where p.uid=:uid and p.type='photo_logo' and f.entity_id=p.pid and m.fid=f.field_reg_library_pic_fid";
  			  $libPic=db_query($sql,array('uid'=>$uid))->fetchField();
		
  			  //default tips
  			  if(empty($logo) or empty($libPic)) $tip='<h5 id="photo_logo_message">Please upload your library logo and a photo to use in your report.</h5>';
  			  else $tip='';
  			  $pic_output = $tip;
  			  
			  //default pictures
			  if(empty($logo)) {$logo="public://default_images/default_logo.jpg";$tag="Upload";}
			  if(empty($libPic)) {$libPic="public://default_images/default_library_pic.jpg";$tag="Upload";}
  
			  $pic_output.="<img width=100px height=100px src='".myimpact_setting_convUri($logo, $publicPath)."' alt='library logo'/>"."<br>";
  		      $pic_output.="<img width=100px height=100px src='".myimpact_setting_convUri($libPic, $publicPath)."' alt='library photo' align=center />";
  
$content = array(
	'libName' => $system_name,
	'firstName'=>$firstname,
	'lastName' => $lastname,
	'jobtitle' => $jobtitle,
	'phoneNum' => $phonenum,
	'phoneExt' => $phoneext,
	'surveyCount' => $result_count,
	'step'=>$step,
	'pic_output' =>$pic_output,
	'tag' => $tag,
);	
	
	
	
	
	return theme('myimpact_setting', $content);
}

//deal with the uri from the DB
function myimpact_setting_convUri($uri="", $publicPath){
  $position=explode("://",$uri);

  return $publicPath."/".$position[1];
}

function myimpact_setting_myimpact_registration_page(){
	return '<h3>Thank you for your application</h3>Your account is currently pending approval by the site administrator.
In the meantime, a welcome message with further instructions has been sent to your e-mail address.<br><a href="/">Home</a>';
}

/*
 * 
 *hook_block_info() 
 */
function myimpact_setting_block_info() { 
	
	$blocks['imls_data_instruction'] = array(
		'info' => t('IMLS Data Dynamic Instruction'),
		'status' => 1,
		'region' => 'content',
	  'pages' => 'profile-imls_data/',
		'weight' => -15,
		'visibility' => BLOCK_VISIBILITY_LISTED,
	);
	
	$blocks['intake_form_instruction'] = array(
		'info' => t('Intake Form Dynamic Instruction'),
		'status' => 1,
		'region' => 'content',
	  'pages' => 'profile-intake_form/',
		'weight' => -15,
		'visibility' => BLOCK_VISIBILITY_LISTED,
	);
	
	
	return $blocks;
}	

/*
 * 
 * implements hook_block_configure()
 */

function myimpact_setting_block_configure($delta){
	
	$form = array();
	$imls_default = 'The following fields are pre-populated with information your library has reported to the Institute for Museum and Library Services (IMLS). Please make any necessary updates, confirm the information is correct, and click \'submit.\'';
	variable_set('imls_data_instruction_before', $imls_default);
	
	switch($delta){
		case 'imls_data_instruction':
			$form['imls_data_instruction_before']=array(
			'#type' => 'textarea',
			'#title' => t('Instruction before submitting'),
			'#description'=> t('Enter the text you want to show the users when they are allowed to edit'),
			'#rows' => 10,
			'#default_value' => variable_get('imls_data_instruction_before'),
			);
			
			$form['imls_data_instruction_after']=array(
			'#type' => 'textarea',
			'#title' => t('Instruction after submitting'),
			'#description'=> t('Enter the text you want to show the users when they complete the forms'),
			'#rows' => 10,
			'#default_value' => variable_get('imls_data_instruction_after'),
			);
		break;
		
		case 'intake_form_instruction':
			$form['intake_form_instruction_before']=array(
			'#type' => 'textarea',
			'#title' => t('Instruction before submitting'),
			'#description'=> t('Enter the text you want to show the users when they are allowed to edit'),
			'#rows' => 10,
			'#default_value' => variable_get('intake_form_instruction_before'),
			);
			
			$form['intake_form_instruction_after']=array(
			'#type' => 'textarea',
			'#title' => t('Instruction after submitting'),
			'#description'=> t('Enter the text you want to show the users when they complete the forms'),
			'#rows' => 10,
			'#default_value' => variable_get('intake_form_instruction_after'),
			);
		break;
		
		
	}
	
	return $form;
}

/*
 * implements hook_block_save()
 */

function myimpact_setting_block_save($delta='', $edit=array()){
	switch($delta) {
		case 'imls_data_instruction':
			variable_set('imls_data_instruction_before', $edit['imls_data_instruction_before']);
			variable_set('imls_data_instruction_after', $edit['imls_data_instruction_after']);
			break;
			
		case 'intake_form_instruction':
			variable_set('intake_form_instruction_before', $edit['intake_form_instruction_before']);
			variable_set('intake_form_instruction_after', $edit['intake_form_instruction_after']);
			break;	
			
	}
	return;
}

/*
 * Implements hook_block_view()
 *
 */
function myimpact_setting_block_view($delta=''){
	
	switch ($delta){
		case 'imls_data_instruction':
			//$block['subject'] = t('hello world');
			$block['content'] = myimpact_setting_block_contents($delta);
			return $block;
			break;
			
		case 'intake_form_instruction':
			//$block['subject'] = t('hello world');
			$block['content'] = myimpact_setting_block_contents($delta);
			return $block;
			break;	
			
	}
}

/*
 * A module-fefined block content function
 */
function myimpact_setting_block_contents($delta){
	switch($delta){
		case 'imls_data_instruction':
			
			if (myimpact_setting_form_status($type='imls_data')) $output=variable_get('imls_data_instruction_before');
			else $output=variable_get('imls_data_instruction_after');

			return array('#markup'=>$output);
		break;
		
		case 'intake_form_instruction':
			
			if (myimpact_setting_form_status($type='intake_form')) $output=variable_get('intake_form_instruction_before');
			else $output=variable_get('intake_form_instruction_after');

			return array('#markup'=>$output);
		break;
	}
}


/*
 * to tell whether users submit the form or the date is expired or not
 * 
 * if the user has submitted or the date is expired, return False
 * 
 * if the user has not submitted or the date is not expired, return True
 * 
 */
function myimpact_setting_form_status($type=''){
	  
	global $user;
	
	$sql="SELECT field_fielding_date_value2 AS from_date FROM {field_data_field_fielding_date} AS a, {profile} AS b WHERE a.entity_id=b.pid AND b.uid=:uid";
	$date=db_query($sql, array('uid'=>$user->uid))->fetchField();
	   
	 //if they have submitted, the edit page will not be allowed
     $sql="select pid from {myimpact_profile_status} where uid=:uid and type=:type";
     $pid=db_query($sql, array('uid'=>$user->uid, 'type'=>$type))->fetchField();
	  
	   if((empty($date) or strtotime($date)>time()) and empty($pid)) return True;
	   else return False;
	
}
