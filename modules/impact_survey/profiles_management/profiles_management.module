<?php
/**
 * @files
 * Lets the administrators to manage all the profiles
 *
 * List all the users, allow the administrators to select the users,
 * then list all the profiles the users have completed, allow the administrators to select the profile
 *
 */


/**
 * Implementation of hook_menu().
 *
 *
 */
function profiles_management_menu() {

  $items['admin/profiles_management'] = array(
		'title' => 'Profiles Management',
		'description' => 'Manage the Profiles',
		'position' => 'right',
		'weight' => -5,
		'page callback' => 'profiles_management_list',
		'access callback' => 'user_access',
		'access arguments' => array('profiles management'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module','system'),
		'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/profiles_management/%profiles_management_check_type/%profiles_management_check_uid/view'] = array(
		'title' => 'hello',
		'title callback' => 'profiles_management_get_library_name',
		'title arguments' => array(3),
		'description' => 'Manage the Profiles',
		'page callback' => 'profiles_management_admin_view',
		'page arguments' => array(2,3),
		'access callback' => 'user_access',
		'access arguments' => array('profiles management'),	
		'file' => 'contrib/profile2_page.inc',
		'file path' => drupal_get_path('module','profile2'),
		'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/profiles_management/%profiles_management_check_type/%profiles_management_check_uid/edit'] = array(
		'title' => 'Name Here',
		'title callback' => 'profiles_management_get_library_name',
		'title arguments' => array(3),
		'description' => 'Manage the Profiles',
		'page callback' => 'profiles_management_admin_edit',
		'page arguments' => array(2,3),
		'access callback' => 'user_access',
		'access arguments' => array('profiles management'),	
		'file' => 'contrib/profile2_page.inc',
		'file path' => drupal_get_path('module','profile2'),
		'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/profiles_management/%profiles_management_selected_users/custom'] = array(
		'title' => 'Custom Profiles Management',
		'description' => 'Manage the Selected Profiles',
		'position' => 'right',
		'weight' => -5,
		'page callback' => 'profiles_management_list_custom',
		'page arguments' => array(2),
		'access callback' => 'user_access',
		'access arguments' => array('profiles management'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module','system'),
		'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/profiles_management/%profiles_management_selected_users/custom/%profiles_management_check_type/%profiles_management_check_uid/view'] = array(
		'title' => 'Custom Page',
		'title callback' => 'profiles_management_get_library_name',
		'title arguments' => array(5),
		'description' => 'Manage the Profiles',
		'page callback' => 'profiles_management_admin_view',
		'page arguments' => array(4,5),
		'access callback' => 'user_access',
		'access arguments' => array('profiles management'),	
		'file' => 'contrib/profile2_page.inc',
		'file path' => drupal_get_path('module','profile2'),
		'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/profiles_management/%profiles_management_selected_users/custom/%profiles_management_check_type/%profiles_management_check_uid/edit'] = array(
		'title' => 'Name Here',
		'title callback' => 'profiles_management_get_library_name',
		'title arguments' => array(5),
		'description' => 'Manage the Profiles',
		'page callback' => 'profiles_management_admin_edit', 
		'page arguments' => array(4,5),
		'access callback' => 'user_access',
		'access arguments' => array('profiles management'),	
		'file' => 'contrib/profile2_page.inc',
		'file path' => drupal_get_path('module','profile2'),
		'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/*
 * this function is used to make sure that admins could go back to the search result
 *
 */
function profiles_management_selected_users_load($arg){

  global $search_libaries;

  if($arg == "profile-library_registration" or $arg=="profile-imls_data" or $arg=="profile-intake_form" or $arg=="profile-survey_fielding" or $arg=="profile-photo_logo")
  return $arg;

  $GLOBALS['search_libaries']=$arg;
  return $arg;

}

/*
 * check whether the type in address is correct
 */
function profiles_management_check_type_load($type){

  $type=profiles_management_convert_path_type($type);

  return $type;
}

/*
 * check the uid
 *
 */
function profiles_management_check_uid_load($uid){
  if($uid && is_numeric($uid) && user_load($uid)) return $uid;
  return FALSE;
}

/*
 * hook_permission
 *
 * you could change the permission under the item Manage the profiles in Admin Panel
 *
 */
function profiles_management_permission(){
  return array(
		'profiles management' => array( 
		'title' => t('Manage the profiles'), 
		'description' => t('Allow users to manageme the profiles in Profiles Management'),
  ),
  );
}

/*
 * hook_process_breadcrumb
 *
 * add the library name in view and edit page
 */
function profiles_management_preprocess_breadcrumb(&$variables){

  $path=explode('/',$_GET['q']);
  $count=count($path);

  if(isset($path['0']) && $path['0']=='admin' && isset($path['1']) && $path['1']=='profiles_management' && ($path[($count-1)]=="view" or $path[($count-1)]=="edit") ){

    //display the library name at the breadcrumb
    $uid=$path[($count-2)];
    $variables['breadcrumb'][]=profiles_management_get_library_name($uid);

  }
}

/*
 * The View page of the forms
 */
function profiles_management_admin_view($type,$uid){

  //get the pid
  $sql="select pid from {profile} where uid=:uid and type=:type";
  $pid=db_query($sql,array('uid'=>$uid, 'type'=>$type))->fetchField();

  $profile = profile2_load($pid);

  $output = profile2_page_view($profile);

  $button = "<a href='./edit'><input type='submit' id='edit_submit' name='op' class='form-submit' value='Edit'></a>";
  return render($output).$button;
}


/*
 * The Edit page of the forms
 */
function profiles_management_admin_edit($type,$uid){

  //get the pid
  $sql="select pid from {profile} where uid=:uid and type=:type";
  $pid=db_query($sql,array('uid'=>$uid, 'type'=>$type))->fetchField();

  $profile = profile2_load($pid);

  $output=drupal_get_form('profile2_form', $profile);

  //$button = "<a href='../".$uid."'><input type='button value='View'>View</input></a>";

  return render($output);

}


/*
 * get the library name based on the uid
 */
function profiles_management_get_library_name($uid=NULL){

  //get the pid
  $sql="select pid from {profile} where uid=:uid and type='library_registration'";
  $pid=db_query($sql,array('uid'=>$uid))->fetchField();

  //get the prefered name
  $sql="select field_library_reg_pref_value from {field_data_field_library_reg_pref} where entity_id=:pid";
  $preName=db_query($sql, array('pid'=>$pid))->fetchField();

  if(empty($preName)){
    //get the libaray name
    $sql="select library_name from {library_lookup} as l, {field_data_field_library_reg_system} as s where l.fscs_key =s.field_library_reg_system_value  and s.entity_id=:pid";
    $libName=db_query($sql, array('pid'=>$pid))->fetchField();

    return $libName;
  }
  else return $preName;
}

/*
 * convert the path to the real type
 */
function profiles_management_convert_path_type($path){

  switch($path){
    case "profile-library_registration":
      return "library_registration";
    case "profile-intake_form":
      return "intake_form";
    case "profile-imls_data":
      return "imls_data";
    case "profile-survey_fielding":
      return "survey_fielding";
    case "profile-photo_logo":
      return "photo_logo";
  }
  return FALSE;

}

/*
 * display the selected libraries
 *
 * $profile[uid]['System']  means library name
 * $profile[uid]['name'] means user name
 * $profile[uid]['library_registration']
 * $profile[uid]['imls_data']
 * $profile[uid]['intake_form']
 * $profile[uid]['survey_fielding']
 * $profile[uid]['photo_logo']
 *
 */
function profiles_management_list_custom($users){

  $path=$users;
  $users=explode('_',$users);

  $user_name='';
  foreach($users as $u){
    $user_name.="'".$u."',";
  }

  $user_name=rtrim($user_name,",");

  //get uid
  $sql = "select uid,name from {users} where name in ($user_name)";
  $results = db_query($sql);

  $profile=array();
  $query_uid='';
  foreach($results as $r){
    $profile[$r->uid]['name']=$r->name;
    $profile[$r->uid]['System']=profiles_management_get_library_name($r->uid);
    $query_uid.=$r->uid.",";
  }

  if(empty($query_uid)) return t("Sorry! Can NOT fine the library!");

  $query_uid=rtrim($query_uid,",");

  //get the pid and type
  $sql="select uid, type, pid from {profile} where uid in ($query_uid)";
  $types=db_query($sql);

  foreach($types as $t){
    $profile[$t->uid][$t->type]="<a href='./custom/profile-".$t->type."/".$t->uid."/view'>YES</a>";
    if($t->type=='library_registration')
    {
      $profile[$t->uid]['fscs']=profiles_management_get_fscs($t->pid);
      $profile[$t->uid]['fullName']=profiles_management_get_name($t->pid);
    }
  }

  $output=profiles_management_display($profile);
  return $output;

}

/*
 * display all the users in one table
 *
 */
function profiles_management_list(){

  $sql="select uid, name from {users} where uid>0 order by uid Asc";
  $users=db_query($sql);

  $profile = array();
  //get the name and uid
  foreach($users as $u){
    $profile[$u->uid]['name']=$u->name;
  }

  $sql="select uid, type, pid from {profile} order by uid Asc";
  $types=db_query($sql);

  $sql="select entity_id, field_library_reg_pref_value as system from {field_data_field_library_reg_pref}";
  $result=db_query($sql);

  foreach($result as $s){
    $system[$s->entity_id]=$s->system;
  }

  $no_pid='';


  //get lib fscs
  $fscs=profiles_management_get_fscs();

  $fullName = profiles_management_get_name();


  //set the types
  foreach($types as $t){
    $profile[$t->uid][$t->type]="<a href='profiles_management/profile-".$t->type."/".$t->uid."/view'>YES</a>";
    if ($t->type=="library_registration") {
       

      if(isset($fullName[$t->pid])) $profile[$t->uid]['fullName']=$fullName[$t->pid];
       
      if(isset($system[$t->pid])) $profile[$t->uid]['System']=$system[$t->pid];
      else  {$profile[$t->uid]['System']=$t->pid; $no_pid.=$t->pid.",";} //find out the pids which do not have the prefered name
      $profile[$t->uid]['fscs']=isset($fscs[$t->pid])?$fscs[$t->pid]:'';
    }
  }

  $no_pid=rtrim($no_pid,",");

  //get the library name if they do not have the prefered name
  $sql = "select s.entity_id, library_name from {library_lookup} as l, {field_data_field_library_reg_system} as s where l.fscs_key =s.field_library_reg_system_value  and s.entity_id in ($no_pid)";
  $result=db_query($sql);

  foreach($result as $r){
    $lib_sys[$r->entity_id]=$r->library_name;
  }

  $output="<br><a href='profiles_management/AACPL_WA0064_ebaker_karenp_King County Library System/custom'>Five Selected Libraries</a><br><br>";

  $output.=profiles_management_display($profile, $lib_sys);

  return $output;

}

/*
 * the table of the user
 *
 * $profile[uid][type]
 * $profile[uid]['System']  -> library name
 * $profile[uid]['name'] -> user name
 * $profile[uid]['library_registration']
 * $profile[uid]['imls_data']
 * $profile[uid]['intake_form']
 * $profile[uid]['survey_fielding']
 * $profile[uid]['photo_logo']
 *
 */

function profiles_management_display($profile, $lib_sys=array()){
  $header=array(
  array('data' => 'Library System'),
  array('data' => 'User'),
  array('data' => 'Result Count'),
  array('data' => 'Registration Form'),
  array('data' => 'IMLS Data'),
  array('data' => 'Intake Form'),
  array('data' => 'Survey Fielding'),
  array('data' => 'Photo&Logo'),
  );

  $result_count_sql = 'SELECT COUNT( * ) AS responses FROM {survey_responses} WHERE libid = :fscs';
  foreach($profile as $key => $value){
    if (!empty($value['fscs'])) {
      $result_count = db_query($result_count_sql, array('fscs'=>$value['fscs']))->fetchField();
    } else $result_count = 0;
    $rows[] = array(
    array('data' => isset($value['System'])?(is_numeric($value['System']) ? (isset($lib_sys[$value['System']])?$lib_sys[$value['System']]:" ") : $value['System']):' ', 'title'=>isset($value['fscs'])?$value['fscs']:'No FSCS'),
    array('data' => isset($value['name'])? $value['name']:" ", 'title'=>(isset($value['fullName']))?$value['fullName']:"empty"),
    array('data' => $result_count),
    array('data' => isset($value['library_registration'])?$value['library_registration']:"<font color='grey'>NO</font>",'align'=>'center'),
    array('data' => isset($value['imls_data'])?$value['imls_data']:"<font color='grey'>NO</font>",'align'=>'center'),
    array('data' => isset($value['intake_form'])?$value['intake_form']:"<font color='grey'>NO</font>",'align'=>'center'),
    array('data' => isset($value['survey_fielding'])?$value['survey_fielding']:"<font color='grey'>NO</font>",'align'=>'center'),
    array('data' => isset($value['photo_logo'])?$value['photo_logo']:"<font color='grey'>NO</font>",'align'=>'center')
    );
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows));
  return $output;

}


/*
 * get the fscs key based on the condition
 */
function profiles_management_get_fscs($condition="ALL"){

  if($condition=='ALL'){

    $sql = "select entity_id, field_library_reg_system_value as fscs from {field_data_field_library_reg_system}";
    $fscs=db_query($sql);

    foreach($fscs as $f){
      $lib_fscs[$f->entity_id]=$f->fscs;
    }
    return $lib_fscs;
  }

  else {

    $sql = "select field_library_reg_system_value as fscs from {field_data_field_library_reg_system} where entity_id=$condition";
    $fscs = db_query($sql)->fetchField();

    return $fscs;


  }
}

/*
 * get the library name based on the condision
 */
function profiles_management_get_name($condition="ALL"){

  if($condition=="ALL"){
    $sql = "select l.entity_id as id, field_library_reg_fname_value as fname, field_library_reg_lname_value as lname from {field_data_field_library_reg_fname} as f, {field_data_field_library_reg_lname} as l where f.entity_id=l.entity_id";
    $result = db_query($sql);

    foreach($result as $n){
      $name[$n->id] = $n->fname." ".$n->lname;
    }
    return $name;
  }

  else{
    $sql = "select l.entity_id as id, field_library_reg_fname_value as fname, field_library_reg_lname_value as lname from {field_data_field_library_reg_fname} as f, {field_data_field_library_reg_lname} as l where f.entity_id=l.entity_id and f.entity_id=:pid";
    $result = db_query($sql, array('pid'=>$condition));

    foreach($result as $n){
      $name= $n->fname." ".$n->lname;
    }

    return $name;
  }
}
